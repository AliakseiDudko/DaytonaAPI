swagger: '2.0'
info:
  version: '1.0'
  title: 'Daytona API'
  description: 'This is Daytona API'
  
schemes:
 - https
host: virtserver.swaggerhub.com
basePath: /AliakseiDudko/DaytonaAPI/1.0

tags:
  - name: identity
    description: 'Everything about users''s identification. It will be probably a standalone API'
  - name: user
    description: 'Everything about user accounts'
  - name: shop
    description: 'Everything about users'' shops'
  - name: degree
    description: 'Everything about users'' education degree'
  - name: certificate
    description: 'Everything about users'' education certificate'
  - name: experience
    description: 'Everything about users'' work experience'
  - name: country
    description: 'Everything about countries'
  - name: topic
    description: 'Everything about topics'
  - name: onboarding
    description: 'Everything about onboarding process'
    
paths:
  /identities:
    post:
      tags:
        - identity
      summary: 'Creates a new user''s identity'
      description: 'Creates a new user''s identity. Identitity''s provider part'
      operationId: createIdenitity
      parameters:
        - name: createIdentityModel
          in: body
          description: 'Reqired data model to create a new identity'
          required: true
          schema:
            $ref: '#/definitions/createIdentityModel'
      responses:
        201:
          description: 'A new user''s account was succesfully created'
          # Describe response schema
        400:
          description: 'Bad request'
  /user/{userId}:
    get:
      tags:
        - user
      summary: 'Gets information about a user'
      description: 'Gets read-only information about a user'
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/userInfo'
        404:
          description: 'Not found'
  /users/{userId}/profile:
    post:
      tags:
        - user
      summary: 'Creates a user profile' 
      description: 'Creates a user profile with additional information'
      operationId: createProfile
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: createProfileModel
          in: body
          description: 'Data to create'
          required: true
          schema:
            $ref: '#/definitions/createProfileModel'
      responses:
        201:
          description: 'A user profile was successfully created'
          schema:
            $ref: '#/definitions/profile'
        400:
          description: 'Bad request'
    get:
      tags:
        - user
      summary: 'Gets a user profile'
      description: 'Gets a user profile'
      operationId: 'getProfile'
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/profile'
        404:
          description: 'Not found'
    put:
      tags:
        - user
      summary: 'Update a user profile'
      description: 'Updates a user profile'
      operationId: updateProfile
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: updateProfileModel
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/updateProfileModel'
      responses:
        204:
          description: 'A user profile was successfully updated'
        400:
          description: 'Bad request'
  /users/{userId}/profile/image:
    post:
      tags:
        - user
      summary: 'Uploads a profile image'
      description: 'Uploads a profile image'
      consumes:
        - multipart/form-data
      operationId: uploadProfileImage
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: imageData
          in: formData
          description: 'The image to upload'
          required: true
          type: file
      responses:
        201:
          description: 'Profile image was successfully uploaded'
        400:
          description: 'Bad request'
    get:
      tags:
        - user
      summary: 'Gets a profile image'
      description: 'Gets a profile image'
      operationId: getProfileImage
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: string
            format: binary
        404:
          description: 'Not found'
  /users/{userId}/shops:
    post:
      tags:
        - shop
      summary: 'Creates a new shop'
      description: 'Creates a new shop belonging to the user'
      operationId: createShop
      parameters:
        - name: userId
          in: path
          description: 'Id of shop''s owner'
          required: true
          type: integer
          format: int32
        - name: shopModel
          in: body
          description: 'Reqired data model to create a new shop'
          schema:
            $ref: '#/definitions/shopModel'
      responses:
        201:
          description: 'A new shop was successfully created'
          schema:
            $ref: '#/definitions/shop'
        400:
          description: 'Bad request'
  /users/{userId}/shops/{shopId}:
    get:
      tags:
        - shop
      summary: 'Gets a user''s shop'
      description: 'Gets a user''s shop'
      operationId: getShop
      parameters:
        - name: userId
          in: path
          description: 'Id of shop''s owner'
          required: true
          type: integer
          format: int32
        - name: shopId
          in: path
          description: 'Id of shop'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/shop'
        404:
          description: 'Not found'
    put:
      tags:
        - shop
      summary: 'Updates a user''s shop'
      description: 'Updates a user''s shop'
      operationId: updatedShop
      parameters:
        - name: userId
          in: path
          description: 'Id of shop''s owner'
          required: true
          type: integer
          format: int32
        - name: shopId
          in: path
          description: 'Id of shop'
          required: true
          type: integer
          format: int32
        - name: shopModel
          in: body
          description: 'Required data model to update a user''s shop'
          schema:
            $ref: '#/definitions/shopModel'
      responses:
        204:
          description: 'A shop was successfully updated'
        400:
          description: 'Bad request'
  /users/{userId}/shops/{shopId}/image:
    post:
      tags:
        - shop
      summary: 'Uploads a shop''s image'
      description: 'Uploads a shop''s image'
      consumes:
        - multipart/form-data
      operationId: uploadShopImage
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: shopId
          in: path
          description: 'Id of shop'
          required: true
          type: integer
          format: int32
        - name: imageData
          in: formData
          description: 'The image to upload'
          required: true
          type: file
      responses:
        201:
          description: 'Shop image was successfully uploaded'
        400:
          description: 'Bad request'
    get:
      tags:
        - shop
      summary: 'Gets a shop image'
      description: 'Gets a shop image'
      operationId: getShopImage
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: shopId
          in: path
          description: 'Id of shop'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: string
            format: binary
        404:
          description: 'Not found'
  /users/{userId}/degrees:
    post:
      tags:
        - degree
      summary: 'Creates a user''s degree'
      description: 'Creates a new record about a degree got by a user'
      consumes:
        - multipart/form-data
      operationId: createDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user who has a degree'
          required: true
          type: integer
          format: int32
        - name: degreeModel
          in: formData
          description: 'Required data model to create a new record about user''s degree'
          required: true
          type: string
        - name: imageData
          in: formData
          description: 'The image to updload'
          required: true
          type: file
      responses:
        201:
          description: 'A new record about user''s degree was successfully created'
          schema:
            $ref: '#/definitions/degree'
        400:
          description: 'Bad request'
    get:
      tags:
        - degree
      summary: 'Gets a list of user''s degrees'
      description: 'Gets a list of user''s degrees'
      operationId: getDegrees
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/degree'
  /users/{userId}/degrees/{degreeId}:
    get:
      tags:
        - degree
      summary: 'Gets a record about a user''s degree'
      description: 'Gets a record about a user''s degree'
      operationId: getDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: degreeId
          in: path
          description: 'Id of degree'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/degree'
        404:
          description: 'Not found'
    put:
      tags:
        - degree
      summary: 'Updates a record about a user''s degree'
      description: 'Updates a record about a degree got gy a user'
      consumes:
        - multipart/form-data
      operationId: updateDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: degreeId
          in: path
          description: 'Id of degree to update'
          required: true
          type: integer
          format: int32
        - name: degreeModel
          in: formData
          description: 'Required data model to create a new record about user''s degree'
          required: true
          type: string
        - name: imageData
          in: formData
          description: 'The image to updload'
          required: true
          type: file
      responses:
        204:
          description: 'A record about user''s degree was successfully updated'
        400:
          description: 'Bad request'
    delete:
      tags:
        - degree
      summary: 'Deletes a record about user''s degree'
      description: 'Deletes a record about user''s degree'
      operationId: deleteDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: degreeId
          in: path
          description: 'Id of degree to delete'
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: 'A record about user''s degree was successfully deleted'
  /users/{userId}/certificates:
    post:
      tags:
        - certificate
      summary: 'Create a user''s certificate'
      description: 'Creates a new record about certificate obtained by user'
      consumes:
        - multipart/form-data
      operationId: createCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user who obtained a certificate'
          required: true
          type: integer
          format: int32
        - name: certificateModel
          in: formData
          description: 'Required data model to create a new record about user''s certificate'
          required: true
          type: string
        - name: imageData
          in: formData
          description: 'The image to updload'
          required: true
          type: file
      responses:
        201:
          description: 'A new record about certificate obtained by user was successfully create'
          schema:
            $ref: '#/definitions/certificate'
        400:
          description: 'Bad request'
    get:
      tags:
        - certificate
      summary: 'Gets a list of user''s certificates'
      description: 'Gets a list of user''s certificates'
      operationId: getCertificates
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/certificate'
  /users/{userId}/certificates/{certificateId}:
    get:
      tags:
        - certificate
      summary: 'Gets a record about a user''s certificate'
      description: 'Gets a record about a user''s certificate'
      operationId: getCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: certificateId
          in: path
          description: 'Id of certificate'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/certificate'
        404:
          description: 'Not found'
    put:
      tags:
        - certificate
      summary: 'Updates a record about a user''s certificate'
      description: 'Updates a record about a certificate obtained by a user'
      consumes:
        - multipart/form-data
      operationId: updateCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: certificateId
          in: path
          description: 'Id of certificate to update'
          required: true
          type: integer
          format: int32
        - name: certificateModel
          in: formData
          description: 'Required data model to create a new record about user''s certificate'
          required: true
          type: string
        - name: imageData
          in: formData
          description: 'The image to updload'
          required: true
          type: file
      responses:
        204:
          description: 'A record about user''s certificate was successfully updated'
        400:
          description: 'Bad request'
    delete:
      tags:
        - certificate
      summary: 'Deletes a record about user''s certificate'
      description: 'Deletes a record about user''s certificate'
      operationId: deleteCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: certificateId
          in: path
          description: 'Id of certificate to delete'
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: 'A record about user''s certificate was successfully deleted'
  /users/{userId}/experiences:
    post:
      tags:
        - experience
      summary: 'Creates a user''s experience'
      description: 'Creates a new record about user''s experience'
      operationId: createExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: experienceModel
          in: body
          description: 'Required data model to create a new record about user''s experience'
          schema:
            $ref: '#/definitions/experienceModel'
      responses:
        201:
          description: 'A new record about user''s experience was successfully created'
          schema:
            $ref: '#/definitions/experience'
        400:
          description: 'Bad request'
    get:
      tags:
        - experience
      summary: 'Gets a list of user''s experiences'
      description: 'Gets a list of user''s experiences'
      operationId: getExperiences
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/experience'
  /users/{userId}/experiences/{experienceId}:
    get:
      tags:
        - experience
      summary: 'Gets a record about a user''s experience'
      description: 'Gets a record about a user''s experience'
      operationId: getExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: experienceId
          in: path
          description: 'Id of experience'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/experience'
        404:
          description: 'Not found'
    put:
      tags:
        - experience
      summary: 'Updates a record about a user''s experience'
      description: 'Updates a record about a user''s experience'
      operationId: updateExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: experienceId
          in: path
          description: 'Id of experience to update'
          required: true
          type: integer
          format: int32
        - name: experienceModel
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/experienceModel'
      responses:
        204:
          description: 'A record about user''s experience was successfully updated'
        400:
          description: 'Bad request'
    delete:
      tags:
        - experience
      summary: 'Deletes a record about user''s experience'
      description: 'Deletes a record about user''s experience'
      operationId: deleteExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: experienceId
          in: path
          description: 'Id of experience to delete'
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: 'A record about user''s experience was successfully deleted'
  /users/{userId}/topics:
    get:
      tags:
        - topic
      summary: 'Get a list of user''s topics'
      description: 'Get a list topics followed by a user'
      operationId: getUserTopics
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              type: integer
              format: int32
              example: 2
        404:
          description: 'Not found'
    put:
      tags:
        - topic
      summary: 'Update a list of user''s topics'
      description: 'Update a list of topics followed by a user'
      operationId: updateUserTopics
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: topicIds
          in: body
          description: 'Ids of topics'
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int32
              example: 2
      responses:
        204:
          description: 'A list of topics followed a by user was successfully updated'
        400:
          description: 'Bad request'
  /users/{userId}/onboarding/current:
    get:
      tags:
        - onboarding
      summary: 'Gets current user''s onborading state'
      description: 'Gets current user''s onborading state'
      operationId: getOnboardingState
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/onboardingInfo'
          # links:
          #  GetNextStep:
          #    operationId: getOnboardingState
        404:
          description: 'Not found'
  /countries:
    get:
      tags:
        - country
      summary: 'Gets a list of countries'
      description: 'Gets a list of localized countries'
      operationId: getCountries
      parameters:
        - name: Accept-Language
          in: header
          description: 'Users'' language'
          required: true
          type: string
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
  /countries/{countryId}/states:
    get:
      tags:
        - country
      summary: 'Gets a list of states of the country'
      description: 'Gets a list of localized states of the country'
      operationId: getStates
      parameters:
        - name: Accept-Language
          in: header
          description: 'User''s language'
          required: true
          type: string
        - name: countryId
          in: path
          description: 'Id of country'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
        404:
          description: 'Not found'
  /topics/{countryId}:
    get:
      tags:
        - topic
      summary: 'Gets a list of topics'
      description: 'Gets a list of localized topics'
      operationId: getTopics
      parameters:
        - name: Accept-Language
          in: header
          description: 'User''s language'
          required: true
          type: string
        - name: countryId
          in: path
          description: 'Id of user''s country'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/topic'
        400:
          description: 'Not found'
definitions:
  createIdentityModel:
    type: object
    required:
      - firstName
      - lastName
      - email
      - password
      - countryId
      - roleId
    properties:
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      password:
        type: string
        format: password
      countryId:
        type: integer
        format: int32
        example: 1
      roleId:
        type: integer
        format: int32
        example: 1
  userInfo:
    type: object
    required:
      - id
      - firstName
      - lastName
      - email
      - status
      - countryId
      - roleId
    properties:
      id:
        type: integer
        format: int32
        example: 1
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      status:
        type: string
        enum: ['onBoarding', 'active']
        example: 'onBoarding'
      countryId:
        type: integer
        format: int32
        example: 1
      roleId:
        type: integer
        format: int32
        example: 1
      _links:
        type: array
        items:
          $ref: '#/definitions/link'
  profile:
    type: object
    required:
      - id
      - title
      - city
      - stateId
      - bio
      - socialNetworks
    properties:
      id:
        type: integer
        format: int32
        example: 1
      title:
        type: string
        example: 'Auto Specialist'
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
        example: 1
      bio:
        type: string
        example: 'John Doe''s bio'
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
  createProfileModel:
    type: object
    required:
      - city
      - stateId
      - bio
      - socialNetworks
      - localization
    properties:
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
        example: 1
      bio:
        type: string
        example: 'John Doe''s bio'
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
      localization:
        $ref: '#/definitions/localization'
  updateProfileModel:
    type: object
    required:
      - firstName
      - lastName
      - email
      - title
      - city
      - stateId
      - bio
      - socialNetworks
    properties:
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      title:
        type: string
        example: 'Auto Specialist'
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
      bio:
        type: string
        example: 'John Doe''s bio'
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
  shop:
    type: object
    required:
       - id
       - name
       - establishedYear
       - typeId
       - street
       - city
       - zipCode
       - stateId
       - employeeCount
       - description
       - url
    properties:
      id:
        type: integer
        format: int32
        example: 1
      name:
        type: string
        example: 'Vehicle & Car Service'
      establishedYear:
        type: integer
        format: int32
        example: 2015
      typeId:
        type: integer
        format: int32
        example: 1
      street:
        type: string
        example: '5th Avenu, 12'
      city:
        type: string
        example: 'New York'
      zipCode:
        type: string
        example: '111918'
      stateId:
        type: integer
        format: int32
        example: 1
      employeeCount:
        type: integer
        format: int32
        example: 50
      description:
        type: string
        example: 'Vehicle & Car Service''s description'
      url:
        type: string
        format: url
        example: 'https://vehiclecarservice.com'
  shopModel:
    type: object
    required:
       - name
       - establishedYear
       - typeId
       - street
       - city
       - zipCode
       - stateId
       - employeeCount
       - description
       - url
    properties:
      name:
        type: string
        example: 'Vehicle & Car Service'
      establishedYear:
        type: integer
        format: int32
        example: 2015
      typeId:
        type: integer
        format: int32
        example: 1
      street:
        type: string
        example: '5th Avenu, 12'
      city:
        type: string
        example: 'New York'
      zipCode:
        type: string
        example: '111918'
      stateId:
        type: integer
        format: int32
        example: 1
      employeeCount:
        type: integer
        format: int32
        example: 50
      description:
        type: string
        example: 'Vehicle & Car Service''s description'
      url:
        type: string
        format: url
        example: 'https://vehiclecarservice.com'
  degree:
    type: object
    required:
      - id
      - typeId
      - school
      - faculty
      - graduatedOn
    properties:
      id:
        type: integer
        format: int32
        example: 1
      typeId:
        type: integer
        format: int32
        example: 1
      school:
        type: string
        example: 'High School of Vehicle Reparation'
      faculty:
        type: string
        example: 'Department of Car Reparation'
      graduatedOn:
        type: integer
        example: 2015
        format: int32
  degreeModel:
    type: object
    required:
      - typeId
      - school
      - faculty
      - graduatedOn
      - imagePath
    properties:
      typeId:
        type: integer
        format: int32
        example: 1
      school:
        type: string
        example: 'High School of Vehicle Reparation'
      faculty:
        type: string
        example: 'Department of Car Reparation'
      graduatedOn:
        type: integer
        format: int32
        example: 2015
      imagePath:
        type: string
  certificate:
    type: object
    required:
      - id
      - name
      - level
      - startedYear
      - startedMonth
    properties:
      id:
        type: integer
        format: int32
        example: 1
      name:
        type: string
        example: 'Ford Reparation Certificate'
      level:
        type: string
        example: '80'
      startedYear:
        type: integer
        format: int32
        example: 2011
      startedMonth:
        type: integer
        format: int32
        example: 1
      expriredYear:
        type: integer
        format: int32
        example: 2019
      expriredMonth:
        type: integer
        format: int32
        example: 1
  certificateModel:
    type: object
    required:
      - name
      - level
      - startedYear
      - startedMonth
    properties:
      name:
        type: string
        example: 'Ford Reparation Certificate'
      level:
        type: string
        example: '80'
      startedYear:
        type: integer
        format: int32
        example: 2011
      startedMonth:
        type: integer
        format: int32
        example: 1
      expriredYear:
        type: integer
        format: int32
        example: 2019
      expriredMonth:
        type: integer
        format: int32
        example: 1
  experience:
    type: object
    required:
      - id
      - title
      - company
      - startedYear
      - startedMonth
      - city
      - stateId
    properties:
      id:
        type: integer
        format: int32
        example: 1
      title:
        type: string
        example: 'Automative Technician'
      company:
        type: string
        example: 'ABC Technician'
      startedYear:
        type: integer
        format: int32
        example: 2011
      startedMonth:
        type: integer
        format: int32
        example: 1
      expriredYear:
        type: integer
        format: int32
        example: 2019
      expriredMonth:
        type: integer
        format: int32
        example: 1
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
        example: 1
  experienceModel:
    type: object
    required:
      - title
      - company
      - startedYear
      - startedMonth
      - city
      - stateId
    properties:
      title:
        type: string
        example: 'Automative Technician'
      company:
        type: string
        example: 'ABC Technician'
      startedYear:
        type: integer
        format: int32
        example: 2011
      startedMonth:
        type: integer
        format: int32
        example: 1
      expriredYear:
        type: integer
        format: int32
        example: 2019
      expriredMonth:
        type: integer
        format: int32
        example: 1
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
        example: 1
  socialNetwork:
    type: object
    required:
      - socialNetworkId
      - account
    properties:
      socialNetworkId:
        type: integer
        format: int32
        example: 1
      account:
        type: string
        example: 'daytonasocial'
  localization:
    type: object
    required:
      - languageId
      - dateFormatId
      - timeFormatId
      - timeZoneId
    properties:
      languageId:
        type: integer
        format: int32
        example: 1
      dateFormatId:
        type: integer
        format: int32
        example: 1
      timeFormatId:
        type: integer
        format: int32
        example: 1
      timeZoneId:
        type: integer
        format: int32
        example: 1
  topic:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int32
        example: 2
      name:
        type: string
        example: 'Topic To Follow'
      parentId:
        type: integer
        format: int32
        example: 1
  onboardingInfo:
    type: object
    required:
      - stepName
      - model
      - totalReputation
      - currentReputationItems
    properties:
      stepName:
        type: string
        example: 'onboarding-us-shop'
      model:
        type: object
      reputation:
        type: integer
        format: int32
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
      _links:
        type: array
        items:
          $ref: '#/definitions/link'
  reputationItem:
    type: object
    required:
      - description
      - points
    properties:
      description:
        type: string
        example: 'Reputation'
      filled:
        type: boolean
        example: true
      points:
        type: integer
        format: int32
        example: 100
  keyValue:
    type: object
    required:
      - id
      - value
    properties:
      id:
        type: integer
        format: int32
        example: 1
      name: 
        type: string
        example: 'value'
  link:
    type: object
    required:
      - name
    properties:
      name:
        type: object
        properties:
          href:
            type: string
            example: '/'
          method:
            type: string
            enum: ['post', 'get', 'put', 'delete']