swagger: "2.0"
info:
  title: Daytona API
  description: This is Daytona API
  version: "1.0"
host: virtserver.swaggerhub.com
basePath: /AliakseiDudko/DaytonaAPI/1.0
schemes:
- https
paths:
  /identities:
    post:
      tags:
      - identity
      summary: Creates a new user's identity
      description: Creates a new user's identity. Identitity's provider part
      operationId: createIdenitity
      parameters:
      - name: createIdentityModel
        in: body
        description: Reqired data model to create a new identity
        required: true
        schema:
          $ref: '#/definitions/createIdentityModel'
      responses:
        201:
          description: A new user's account was succesfully created
        400:
          description: Bad request
  /user/{userId}:
    get:
      tags:
      - user
      summary: Gets information about a user
      description: Gets read-only information about a user
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/userInfo'
        404:
          description: Not found
  /users/{userId}/profile:
    get:
      tags:
      - user
      summary: Gets a user profile
      description: Gets a user profile
      operationId: getProfile
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/profile'
        404:
          description: Not found
    put:
      tags:
      - user
      summary: Update a user profile
      description: Updates a user profile
      operationId: updateProfile
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: updateProfileModel
        in: body
        description: Data to update
        required: true
        schema:
          $ref: '#/definitions/updateProfileModel'
      responses:
        204:
          description: A user profile was successfully updated
        400:
          description: Bad request
    post:
      tags:
      - user
      summary: Creates a user profile
      description: Creates a user profile with additional information
      operationId: createProfile
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: createProfileModel
        in: body
        description: Data to create
        required: true
        schema:
          $ref: '#/definitions/createProfileModel'
      responses:
        201:
          description: A user profile was successfully created
          schema:
            $ref: '#/definitions/profile'
        400:
          description: Bad request
  /users/{userId}/profile/image:
    get:
      tags:
      - user
      summary: Gets a profile image
      description: Gets a profile image
      operationId: getProfileImage
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            format: binary
            type: string
        404:
          description: Not found
    post:
      tags:
      - user
      summary: Uploads a profile image
      description: Uploads a profile image
      operationId: uploadProfileImage
      consumes:
      - multipart/form-data
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: imageData
        in: formData
        description: The image to upload
        required: true
        type: file
      responses:
        201:
          description: Profile image was successfully uploaded
        400:
          description: Bad request
  /users/{userId}/shops:
    post:
      tags:
      - shop
      summary: Creates a new shop
      description: Creates a new shop belonging to the user
      operationId: createShop
      parameters:
      - name: userId
        in: path
        description: Id of shop's owner
        required: true
        type: integer
        format: int32
      - name: shopModel
        in: body
        description: Reqired data model to create a new shop
        schema:
          $ref: '#/definitions/shopModel'
      responses:
        201:
          description: A new shop was successfully created
          schema:
            $ref: '#/definitions/shop'
        400:
          description: Bad request
  /users/{userId}/shops/{shopId}:
    get:
      tags:
      - shop
      summary: Gets a user's shop
      description: Gets a user's shop
      operationId: getShop
      parameters:
      - name: userId
        in: path
        description: Id of shop's owner
        required: true
        type: integer
        format: int32
      - name: shopId
        in: path
        description: Id of shop
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/shop'
        404:
          description: Not found
    put:
      tags:
      - shop
      summary: Updates a user's shop
      description: Updates a user's shop
      operationId: updatedShop
      parameters:
      - name: userId
        in: path
        description: Id of shop's owner
        required: true
        type: integer
        format: int32
      - name: shopId
        in: path
        description: Id of shop
        required: true
        type: integer
        format: int32
      - name: shopModel
        in: body
        description: Required data model to update a user's shop
        schema:
          $ref: '#/definitions/shopModel'
      responses:
        204:
          description: A shop was successfully updated
        400:
          description: Bad request
  /users/{userId}/shops/{shopId}/image:
    get:
      tags:
      - shop
      summary: Gets a shop image
      description: Gets a shop image
      operationId: getShopImage
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: shopId
        in: path
        description: Id of shop
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            format: binary
            type: string
        404:
          description: Not found
    post:
      tags:
      - shop
      summary: Uploads a shop's image
      description: Uploads a shop's image
      operationId: uploadShopImage
      consumes:
      - multipart/form-data
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: shopId
        in: path
        description: Id of shop
        required: true
        type: integer
        format: int32
      - name: imageData
        in: formData
        description: The image to upload
        required: true
        type: file
      responses:
        201:
          description: Shop image was successfully uploaded
        400:
          description: Bad request
  /users/{userId}/degrees:
    get:
      tags:
      - degree
      summary: Gets a list of user's degrees
      description: Gets a list of user's degrees
      operationId: getDegrees
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/degree'
    post:
      tags:
      - degree
      summary: Creates a user's degree
      description: Creates a new record about a degree got by a user
      operationId: createDegree
      consumes:
      - multipart/form-data
      parameters:
      - name: userId
        in: path
        description: Id of user who has a degree
        required: true
        type: integer
        format: int32
      - name: degreeModel
        in: formData
        description: Required data model to create a new record about user's degree
        required: true
        type: string
      - name: imageData
        in: formData
        description: The image to updload
        required: true
        type: file
      responses:
        201:
          description: A new record about user's degree was successfully created
          schema:
            $ref: '#/definitions/degree'
        400:
          description: Bad request
  /users/{userId}/degrees/{degreeId}:
    get:
      tags:
      - degree
      summary: Gets a record about a user's degree
      description: Gets a record about a user's degree
      operationId: getDegree
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: degreeId
        in: path
        description: Id of degree
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/degree'
        404:
          description: Not found
    put:
      tags:
      - degree
      summary: Updates a record about a user's degree
      description: Updates a record about a degree got gy a user
      operationId: updateDegree
      consumes:
      - multipart/form-data
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: degreeId
        in: path
        description: Id of degree to update
        required: true
        type: integer
        format: int32
      - name: degreeModel
        in: formData
        description: Required data model to create a new record about user's degree
        required: true
        type: string
      - name: imageData
        in: formData
        description: The image to updload
        required: true
        type: file
      responses:
        204:
          description: A record about user's degree was successfully updated
        400:
          description: Bad request
    delete:
      tags:
      - degree
      summary: Deletes a record about user's degree
      description: Deletes a record about user's degree
      operationId: deleteDegree
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: degreeId
        in: path
        description: Id of degree to delete
        required: true
        type: integer
        format: int32
      responses:
        204:
          description: A record about user's degree was successfully deleted
  /users/{userId}/certificates:
    get:
      tags:
      - certificate
      summary: Gets a list of user's certificates
      description: Gets a list of user's certificates
      operationId: getCertificates
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/certificate'
    post:
      tags:
      - certificate
      summary: Create a user's certificate
      description: Creates a new record about certificate obtained by user
      operationId: createCertificate
      consumes:
      - multipart/form-data
      parameters:
      - name: userId
        in: path
        description: Id of user who obtained a certificate
        required: true
        type: integer
        format: int32
      - name: certificateModel
        in: formData
        description: Required data model to create a new record about user's certificate
        required: true
        type: string
      - name: imageData
        in: formData
        description: The image to updload
        required: true
        type: file
      responses:
        201:
          description: A new record about certificate obtained by user was successfully
            create
          schema:
            $ref: '#/definitions/certificate'
        400:
          description: Bad request
  /users/{userId}/certificates/{certificateId}:
    get:
      tags:
      - certificate
      summary: Gets a record about a user's certificate
      description: Gets a record about a user's certificate
      operationId: getCertificate
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: certificateId
        in: path
        description: Id of certificate
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/certificate'
        404:
          description: Not found
    put:
      tags:
      - certificate
      summary: Updates a record about a user's certificate
      description: Updates a record about a certificate obtained by a user
      operationId: updateCertificate
      consumes:
      - multipart/form-data
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: certificateId
        in: path
        description: Id of certificate to update
        required: true
        type: integer
        format: int32
      - name: certificateModel
        in: formData
        description: Required data model to create a new record about user's certificate
        required: true
        type: string
      - name: imageData
        in: formData
        description: The image to updload
        required: true
        type: file
      responses:
        204:
          description: A record about user's certificate was successfully updated
        400:
          description: Bad request
    delete:
      tags:
      - certificate
      summary: Deletes a record about user's certificate
      description: Deletes a record about user's certificate
      operationId: deleteCertificate
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: certificateId
        in: path
        description: Id of certificate to delete
        required: true
        type: integer
        format: int32
      responses:
        204:
          description: A record about user's certificate was successfully deleted
  /users/{userId}/experiences:
    get:
      tags:
      - experience
      summary: Gets a list of user's experiences
      description: Gets a list of user's experiences
      operationId: getExperiences
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/experience'
    post:
      tags:
      - experience
      summary: Creates a user's experience
      description: Creates a new record about user's experience
      operationId: createExperience
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: experienceModel
        in: body
        description: Required data model to create a new record about user's experience
        schema:
          $ref: '#/definitions/experienceModel'
      responses:
        201:
          description: A new record about user's experience was successfully created
          schema:
            $ref: '#/definitions/experience'
        400:
          description: Bad request
  /users/{userId}/experiences/{experienceId}:
    get:
      tags:
      - experience
      summary: Gets a record about a user's experience
      description: Gets a record about a user's experience
      operationId: getExperience
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: experienceId
        in: path
        description: Id of experience
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/experience'
        404:
          description: Not found
    put:
      tags:
      - experience
      summary: Updates a record about a user's experience
      description: Updates a record about a user's experience
      operationId: updateExperience
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: experienceId
        in: path
        description: Id of experience to update
        required: true
        type: integer
        format: int32
      - name: experienceModel
        in: body
        description: Data to update
        required: true
        schema:
          $ref: '#/definitions/experienceModel'
      responses:
        204:
          description: A record about user's experience was successfully updated
        400:
          description: Bad request
    delete:
      tags:
      - experience
      summary: Deletes a record about user's experience
      description: Deletes a record about user's experience
      operationId: deleteExperience
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: experienceId
        in: path
        description: Id of experience to delete
        required: true
        type: integer
        format: int32
      responses:
        204:
          description: A record about user's experience was successfully deleted
  /users/{userId}/topics:
    get:
      tags:
      - topic
      summary: Get a list of user's topics
      description: Get a list topics followed by a user
      operationId: getUserTopics
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              format: int32
              type: integer
              example: 2
        404:
          description: Not found
    put:
      tags:
      - topic
      summary: Update a list of user's topics
      description: Update a list of topics followed by a user
      operationId: updateUserTopics
      parameters:
      - name: userId
        in: path
        description: Id of user
        required: true
        type: integer
        format: int32
      - name: topicIds
        in: body
        description: Ids of topics
        required: true
        schema:
          type: array
          items:
            format: int32
            type: integer
            example: 2
      responses:
        204:
          description: A list of topics followed a by user was successfully updated
        400:
          description: Bad request
  /onboarding/{id}/onboarding-us-shop:
    get:
      tags:
      - onboarding
      summary: Gets current user's onborading state
      description: Gets current user's onborading state
      operationId: getOnboardingStateShop
      parameters:
      - name: id
        in: path
        description: Id of onboarding process
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/onboardingInfoShop'
        404:
          description: Not found
  /onboarding/{id}/onboarding-us-profile:
    get:
      tags:
      - onboarding
      summary: Gets current user's onborading state
      description: Gets current user's onborading state
      operationId: getOnboardingStateProfile
      parameters:
      - name: id
        in: path
        description: Id of onboarding process
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/onboardingInfoProfile'
        404:
          description: Not found
  /onboarding/{id}/onboarding-us-degrees:
    get:
      tags:
      - onboarding
      summary: Gets current user's onborading state
      description: Gets current user's onborading state
      operationId: getOnboardingStateDegrees
      parameters:
      - name: id
        in: path
        description: Id of onboarding process
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/onboardingInfoDegrees'
        404:
          description: Not found
  /onboarding/{id}/onboarding-us-certificates:
    get:
      tags:
      - onboarding
      summary: Gets current user's onborading state
      description: Gets current user's onborading state
      operationId: getOnboardingStateCertificates
      parameters:
      - name: id
        in: path
        description: Id of onboarding process
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/onboardingInfoCertificates'
        404:
          description: Not found
  /onboarding/{id}/onboarding-us-experiences:
    get:
      tags:
      - onboarding
      summary: Gets current user's onborading state
      description: Gets current user's onborading state
      operationId: getOnboardingStateExperiences
      parameters:
      - name: id
        in: path
        description: Id of onboarding process
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/onboardingInfoExperiences'
        404:
          description: Not found
  /onboarding/{id}/onboarding-us-topics:
    get:
      tags:
      - onboarding
      summary: Gets current user's onborading state
      description: Gets current user's onborading state
      operationId: getOnboardingStateTopics
      parameters:
      - name: id
        in: path
        description: Id of onboarding process
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/onboardingInfoTopics'
        404:
          description: Not found
  /countries:
    get:
      tags:
      - lookup
      summary: Gets a list of countries
      description: Gets a list of localized countries
      operationId: getCountries
      parameters:
      - name: Accept-Language
        in: header
        description: Users' language
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
  /countries/{countryId}/states:
    get:
      tags:
      - lookup
      summary: Gets a list of states of the country
      description: Gets a list of localized states of the country
      operationId: getStates
      parameters:
      - name: Accept-Language
        in: header
        description: User's language
        required: true
        type: string
      - name: countryId
        in: path
        description: Id of country
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
        404:
          description: Not found
  /timezones:
    get:
      tags:
      - lookup
      summary: Gets a list of supported time zones
      description: Gets a list of localized supported time zones
      operationId: getTimeZones
      parameters:
      - name: Accept-Language
        in: header
        description: Users' language
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
  /timeformats:
    get:
      tags:
      - lookup
      summary: Gets a list of supported time formats
      description: Gets a list of localized supported time formats
      operationId: getTimeFormats
      parameters:
      - name: Accept-Language
        in: header
        description: Users' language
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
  /dateformats:
    get:
      tags:
      - lookup
      summary: Gets a list of supported date formats
      description: Gets a list of localized supported date formats
      operationId: getDateFormats
      parameters:
      - name: Accept-Language
        in: header
        description: Users' language
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
  /languages:
    get:
      tags:
      - lookup
      summary: Gets a list of supported languages
      description: Gets a list of localized supported languages
      operationId: getLanguages
      parameters:
      - name: Accept-Language
        in: header
        description: Users' language
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/keyValue'
  /topics/{countryId}:
    get:
      tags:
      - lookup
      summary: Gets a list of topics
      description: Gets a list of localized topics
      operationId: getTopics
      parameters:
      - name: Accept-Language
        in: header
        description: User's language
        required: true
        type: string
      - name: countryId
        in: path
        description: Id of user's country
        required: true
        type: integer
        format: int32
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/topic'
        400:
          description: Not found
  /translations:
    get:
      tags:
      - localization
      summary: Gets a list of translations
      description: Gets a list of localized translations
      operationId: getTranslations
      parameters:
      - name: Accept-Language
        in: header
        description: User's language
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/translationValue'
        400:
          description: Not found
definitions:
  createIdentityModel:
    required:
    - firstName
    - lastName
    - email
    - password
    - countryId
    - roleId
    type: object
    properties:
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: Doe
      email:
        format: email
        type: string
        example: john.doe@daytona.com
      password:
        format: password
        type: string
      countryId:
        format: int32
        type: integer
        example: 1
      roleId:
        format: int32
        type: integer
        example: 1
  userInfo:
    required:
    - id
    - firstName
    - lastName
    - email
    - status
    - countryId
    - roleId
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: Doe
      email:
        format: email
        type: string
        example: john.doe@daytona.com
      status:
        enum:
        - onBoarding
        - active
        type: string
        example: onBoarding
      countryId:
        format: int32
        type: integer
        example: 1
      roleId:
        format: int32
        type: integer
        example: 1
  profile:
    required:
    - id
    - title
    - city
    - stateId
    - bio
    - socialNetworks
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      title:
        type: string
        example: Auto Specialist
      city:
        type: string
        example: New York
      stateId:
        format: int32
        type: integer
        example: 1
      bio:
        type: string
        example: John Doe's bio
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
  createProfileModel:
    required:
    - city
    - stateId
    - bio
    - socialNetworks
    - localization
    type: object
    properties:
      city:
        type: string
        example: New York
      stateId:
        format: int32
        type: integer
        example: 1
      bio:
        type: string
        example: John Doe's bio
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
      localization:
        $ref: '#/definitions/localization'
  updateProfileModel:
    required:
    - firstName
    - lastName
    - email
    - title
    - city
    - stateId
    - bio
    - socialNetworks
    type: object
    properties:
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: Doe
      email:
        format: email
        type: string
        example: john.doe@daytona.com
      title:
        type: string
        example: Auto Specialist
      city:
        type: string
        example: New York
      stateId:
        format: int32
        type: integer
      bio:
        type: string
        example: John Doe's bio
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
  shop:
    required:
    - id
    - name
    - establishedYear
    - typeId
    - street
    - city
    - zipCode
    - stateId
    - employeeCount
    - description
    - url
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      name:
        type: string
        example: Vehicle & Car Service
      establishedYear:
        format: int32
        type: integer
        example: 2015
      typeId:
        format: int32
        type: integer
        example: 1
      street:
        type: string
        example: 5th Avenu, 12
      city:
        type: string
        example: New York
      zipCode:
        type: string
        example: "111918"
      stateId:
        format: int32
        type: integer
        example: 1
      employeeCount:
        format: int32
        type: integer
        example: 50
      description:
        type: string
        example: Vehicle & Car Service's description
      url:
        format: url
        type: string
        example: https://vehiclecarservice.com
  shopModel:
    required:
    - name
    - establishedYear
    - typeId
    - street
    - city
    - zipCode
    - stateId
    - employeeCount
    - description
    - url
    type: object
    properties:
      name:
        type: string
        example: Vehicle & Car Service
      establishedYear:
        format: int32
        type: integer
        example: 2015
      typeId:
        format: int32
        type: integer
        example: 1
      street:
        type: string
        example: 5th Avenu, 12
      city:
        type: string
        example: New York
      zipCode:
        type: string
        example: "111918"
      stateId:
        format: int32
        type: integer
        example: 1
      employeeCount:
        format: int32
        type: integer
        example: 50
      description:
        type: string
        example: Vehicle & Car Service's description
      url:
        format: url
        type: string
        example: https://vehiclecarservice.com
  degree:
    required:
    - id
    - typeId
    - school
    - faculty
    - graduatedOn
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      typeId:
        format: int32
        type: integer
        example: 1
      school:
        type: string
        example: High School of Vehicle Reparation
      faculty:
        type: string
        example: Department of Car Reparation
      graduatedOn:
        format: int32
        type: integer
        example: 2015
  certificate:
    required:
    - id
    - name
    - level
    - startedYear
    - startedMonth
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      name:
        type: string
        example: Ford Reparation Certificate
      level:
        type: string
        example: "80"
      startedYear:
        format: int32
        type: integer
        example: 2011
      startedMonth:
        format: int32
        type: integer
        example: 1
      expriredYear:
        format: int32
        type: integer
        example: 2019
      expriredMonth:
        format: int32
        type: integer
        example: 1
  experience:
    required:
    - id
    - title
    - company
    - startedYear
    - startedMonth
    - city
    - stateId
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      title:
        type: string
        example: Automative Technician
      company:
        type: string
        example: ABC Technician
      startedYear:
        format: int32
        type: integer
        example: 2011
      startedMonth:
        format: int32
        type: integer
        example: 1
      expriredYear:
        format: int32
        type: integer
        example: 2019
      expriredMonth:
        format: int32
        type: integer
        example: 1
      city:
        type: string
        example: New York
      stateId:
        format: int32
        type: integer
        example: 1
  experienceModel:
    required:
    - title
    - company
    - startedYear
    - startedMonth
    - city
    - stateId
    type: object
    properties:
      title:
        type: string
        example: Automative Technician
      company:
        type: string
        example: ABC Technician
      startedYear:
        format: int32
        type: integer
        example: 2011
      startedMonth:
        format: int32
        type: integer
        example: 1
      expriredYear:
        format: int32
        type: integer
        example: 2019
      expriredMonth:
        format: int32
        type: integer
        example: 1
      city:
        type: string
        example: New York
      stateId:
        format: int32
        type: integer
        example: 1
  socialNetwork:
    required:
    - socialNetworkId
    - account
    type: object
    properties:
      socialNetworkId:
        format: int32
        type: integer
        example: 1
      account:
        type: string
        example: daytonasocial
  localization:
    required:
    - languageId
    - dateFormatId
    - timeFormatId
    - timeZoneId
    type: object
    properties:
      languageId:
        format: int32
        type: integer
        example: 1
      dateFormatId:
        format: int32
        type: integer
        example: 1
      timeFormatId:
        format: int32
        type: integer
        example: 1
      timeZoneId:
        format: int32
        type: integer
        example: 1
  topic:
    required:
    - id
    - name
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 2
      name:
        type: string
        example: Topic To Follow
      parentId:
        format: int32
        type: integer
        example: 1
  reputationItem:
    required:
    - description
    - points
    type: object
    properties:
      description:
        type: string
        example: Reputation
      filled:
        type: boolean
        example: true
      points:
        format: int32
        type: integer
        example: 100
  keyValue:
    required:
    - id
    - value
    type: object
    properties:
      id:
        format: int32
        type: integer
        example: 1
      value:
        type: string
        example: value
  translationValue:
    required:
    - key
    - value
    type: object
    properties:
      key:
        type: string
        example: key
      value:
        type: string
        example: value
  onboardingInfo:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        type: object
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
  onboardingInfoCertificates:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        type: array
        items:
          $ref: '#/definitions/certificate'
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
  onboardingInfoDegrees:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        type: array
        items:
          $ref: '#/definitions/degree'
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
  onboardingInfoExperiences:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        type: array
        items:
          $ref: '#/definitions/experience'
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
  onboardingInfoProfile:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        $ref: '#/definitions/profile'
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
  onboardingInfoShop:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        $ref: '#/definitions/shop'
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
  onboardingInfoTopics:
    required:
    - model
    - totalReputation
    - reputationItems
    type: object
    properties:
      model:
        type: array
        items:
          type: integer
          example: 1
      totalReputation:
        format: int32
        type: integer
        example: 100
      reputationItems:
        type: array
        items:
          $ref: '#/definitions/reputationItem'
tags:
- name: identity
  description: Everything about users's identification. It will be probably a standalone API
- name: user
  description: Everything about user accounts
- name: shop
  description: Everything about users' shops
- name: degree
  description: Everything about users' education degree
- name: certificate
  description: Everything about users' education certificate
- name: experience
  description: Everything about users' work experience
- name: lookup
  description: Everything about lookup resources
- name: topic
  description: Everything about topics
- name: onboarding
  description: Everything about onboarding process
- name: localization
  description: Everything about localization