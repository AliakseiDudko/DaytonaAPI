swagger: '2.0'
info:
  version: '1.0'
  title: 'Daytona API'
  description: 'This is Daytona API'
  
schemes:
 - https
host: virtserver.swaggerhub.com
basePath: /AliakseiDudko/DaytonaAPI/1.0

tags:
  - name: user
    description: 'Everything about user accounts'
  - name: shop
    description: 'Everything about users'' shops'
    
paths:
  /users:
    post:
      tags:
        - user
      summary: 'Creates a new user account'
      description: 'Creates a new user account'
      operationId: addUser
      parameters:
        - name: createUserModel
          in: body
          description: 'Reqired data model to create a new user'
          required: true
          schema:
            type: object
            required:
              - user
              - roleId
            properties:
              user:
                $ref: '#/definitions/user'
              roleId:
                type: integer
                format: int32
      responses:
        201:
          description: 'A new user account was succesfully created'
          schema:
            $ref: '#/definitions/user'
        400:
          description: 'Bad request'
  /users/{userId}:
    put:
      tags:
        - user
      summary: 'Updates a user account' 
      description: 'Updates a user''s account with additional information'
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: 'Id of user to update'
          required: true
          type: integer
          format: int32
        - name: updateUserModel
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        204:
          description: 'A user account was successfully updated'
        400:
          description: 'Bad request'
    get:
      tags:
        - user
      summary: 'Gets a user account'
      description: 'Gets a single user account by ID'
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'Id of user to return'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/user'
  /users/{userId}/shops:
    post:
      tags:
        - shop
      summary: 'Creates a new shop'
      description: 'Creates a new shop belonging to the user with userId'
      operationId: addShop
      parameters:
        - name: userId
          in: path
          description: 'Id of shop''s owner'
          required: true
          type: integer
          format: int32
        - name: createShopModel
          in: body
          description: 'Reqired data model to create a new shop'
          schema:
            $ref: '#/definitions/shop'
      responses:
        201:
          description: 'A new shop was successfully created'
          schema:
            $ref: '#/definitions/shop'
        400:
          description: 'Bad request'
definitions:
  user:
    type: object
    required:
      - id
      - firstName
      - lastName
      - email
      - countryId
    properties:
      id:
        type: integer
        format: int32
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      bio:
        type: string
        example: 'John Doe''s bio'
      countryId:
        type: integer
        format: int32
      stateId:
        type: integer
        format: int32
      zipCode:
        type: string
      statusId:
        type: integer
        format: int32
      languageId:
        type: integer
        format: int32
      dateFormatId:
        type: integer
        format: int32
      timeZoneId:
        type: integer
        format: int32
      imagePath:
        type: string
  shop:
    type: object
    required:
       - id
       - name
       - establishedYear
       - shopTypeId
       - street
       - city
       - zipCode
       - stateId
       - employeeCount
       - description
       - url
       - imagePath
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        example: 'Vehicle & Car Service'
      establishedYear:
        type: integer
        format: int32
        example: 2015
      shopTypeId:
        type: integer
        format: int32
      street:
        type: string
        example: '5th Avenu, 12'
      city:
        type: string
        example: 'New Yourk'
      zipCode:
        type: string
        example: '111918'
      stateId:
        type: integer
        format: int32
      employeeCount:
        type: integer
        format: int32
        example: 50
      description:
        type: string
        example: 'Vehicle & Car Service''s description'
      url:
        type: string
        format: url
        example: 'https://vehiclecarservice.com'
      imagePath:
        type: string