swagger: '2.0'
info:
  version: '1.0'
  title: 'Daytona API'
  description: 'This is Daytona API'
  
schemes:
 - https
host: virtserver.swaggerhub.com
basePath: /AliakseiDudko/DaytonaAPI/1.0

tags:
  - name: user
    description: 'Everything about user accounts'
  - name: shop
    description: 'Everything about users'' shops'
  - name: degree
    description: 'Everything about users'' education degree'
  - name: certificate
    description: 'Everything about users'' education certificate'
  - name: experience
    description: 'Everything about users'' work experience'
    
paths:
  /users:
    post:
      tags:
        - user
      summary: 'Creates a new user account'
      description: 'Creates a new user account'
      operationId: addUser
      parameters:
        - name: createUserModel
          in: body
          description: 'Reqired data model to create a new user'
          required: true
          schema:
            $ref: '#/definitions/createUserModel'
      responses:
        204:
          description: 'A new user account was succesfully created'
        400:
          description: 'Bad request'
  /users/{userId}/profile:
    post:
      tags:
        - user
      summary: 'Creates a user profile' 
      description: 'Creates a user profile with additional information'
      operationId: createProfile
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: createProfileModel
          in: body
          description: 'Data to create'
          required: true
          schema:
            $ref: '#/definitions/createProfileModel'
      responses:
        201:
          description: 'A user profile was successfully created'
          schema:
            $ref: '#/definitions/profile'
        400:
          description: 'Bad request'
    get:
      tags:
        - user
      summary: 'Gets a user profile'
      description: 'Gets a user profile'
      operationId: 'getProfile'
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/profile'
    put:
      tags:
        - user
      summary: 'Update a user profile'
      description: 'Updates a user profile'
      operationId: updateProfile
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: updateProfileModel
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/updateProfileModel'
      responses:
        204:
          description: 'A user profile was successfully updated'
        400:
          description: 'Bad request'
  /users/{userId}/shops:
    post:
      tags:
        - shop
      summary: 'Creates a new shop'
      description: 'Creates a new shop belonging to the user'
      operationId: addShop
      parameters:
        - name: userId
          in: path
          description: 'Id of shop''s owner'
          required: true
          type: integer
          format: int32
        - name: createShopModel
          in: body
          description: 'Reqired data model to create a new shop'
          schema:
            $ref: '#/definitions/shopModel'
      responses:
        201:
          description: 'A new shop was successfully created'
          schema:
            $ref: '#/definitions/shop'
        400:
          description: 'Bad request'
  /users/{userId}/degrees:
    post:
      tags:
        - degree
      summary: 'Creates a user''s degree'
      description: 'Creates a new record about a degree got by a user'
      operationId: addDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user who has a degree'
          required: true
          type: integer
          format: int32
        - name: createDegreeModel
          in: body
          description: 'Required data model to create a new record about user''s degree'
          schema:
            $ref: '#/definitions/degreeModel'
      responses:
        201:
          description: 'A new record about user''s degree was successfully created'
          schema:
            $ref: '#/definitions/degree'
        400:
          description: 'Bad request'
    get:
      tags:
        - degree
      summary: 'Gets a list of user''s degrees'
      description: 'Gets a list of user''s degrees'
      operationId: getDegrees
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/degree'
  /users/{userId}/degrees/{degreeId}:
    put:
      tags:
        - degree
      summary: 'Updates a record about a user''s degree'
      description: 'Updates a record about a degree got gy a user'
      operationId: updateDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: degreeId
          in: path
          description: 'Id of degree to update'
          required: true
          type: integer
          format: int32
        - name: updateDegreeModel
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/degreeModel'
      responses:
        204:
          description: 'A record about user''s degree was successfully updated'
        400:
          description: 'Bad request'
    delete:
      tags:
        - degree
      summary: 'Deletes a record about user''s degree'
      description: 'Deletes a record about user''s degree'
      operationId: deleteDegree
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: degreeId
          in: path
          description: 'Id of degree to delete'
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: 'A record about user''s degree was successfully deleted'
  /users/{userId}/certificates:
    post:
      tags:
        - certificate
      summary: 'Create a user''s certificate'
      description: 'Creates a new record about certificate obtained by user'
      operationId: addCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user who obtained a certificate'
          required: true
          type: integer
          format: int32
        - name: createCertificateModel
          in: body
          description: 'Required data model to create a new record about user''s certificate'
          schema:
            $ref: '#/definitions/certificateModel'
      responses:
        201:
          description: 'A new record about certificate obtained by user was successfully create'
          schema:
            $ref: '#/definitions/certificate'
        400:
          description: 'Bad request'
    get:
      tags:
        - certificate
      summary: 'Gets a list of user''s certificates'
      description: 'Gets a list of user''s certificates'
      operationId: getCertificates
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/certificate'
  /users/{userId}/certificates/{certificateId}:
    put:
      tags:
        - certificate
      summary: 'Updates a record about a user''s certificate'
      description: 'Updates a record about a certificate obtained by a user'
      operationId: updateCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: certificateId
          in: path
          description: 'Id of certificate to update'
          required: true
          type: integer
          format: int32
        - name: updateCertificateMode
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/certificateModel'
      responses:
        204:
          description: 'A record about user''s certificate was successfully updated'
        400:
          description: 'Bad request'
    delete:
      tags:
        - certificate
      summary: 'Deletes a record about user''s certificate'
      description: 'Deletes a record about user''s certificate'
      operationId: deleteCertificate
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: certificateId
          in: path
          description: 'Id of certificate to delete'
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: 'A record about user''s certificate was successfully deleted'
  /users/{userId}/experiences:
    post:
      tags:
        - experience
      summary: 'Creates a user''s experience'
      description: 'Creates a new record about user''s experience'
      operationId: addExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: createExperienceModel
          in: body
          description: 'Required data model to create a new record about user''s experience'
          schema:
            $ref: '#/definitions/experienceModel'
      responses:
        201:
          description: 'A new record about user''s experience was successfully created'
          schema:
            $ref: '#/definitions/experience'
        400:
          description: 'Bad request'
    get:
      tags:
        - experience
      summary: 'Gets a list of user''s experiences'
      description: 'Gets a list of user''s experiences'
      operationId: getExperiences
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: 'OK'
          schema:
            type: array
            items:
              $ref: '#/definitions/experience'
  /users/{userId}/experiences/{experienceId}:
    put:
      tags:
        - experience
      summary: 'Updates a record about a user''s experience'
      description: 'Updates a record about a user''s experience'
      operationId: updateExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: experienceId
          in: path
          description: 'Id of experience to update'
          required: true
          type: integer
          format: int32
        - name: updateExperienceModel
          in: body
          description: 'Data to update'
          required: true
          schema:
            $ref: '#/definitions/experienceModel'
      responses:
        204:
          description: 'A record about user''s experience was successfully updated'
        400:
          description: 'Bad request'
    delete:
      tags:
        - experience
      summary: 'Deletes a record about user''s experience'
      description: 'Deletes a record about user''s experience'
      operationId: deleteExperience
      parameters:
        - name: userId
          in: path
          description: 'Id of user'
          required: true
          type: integer
          format: int32
        - name: experienceId
          in: path
          description: 'Id of experience to delete'
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: 'A record about user''s experience was successfully deleted'
definitions:
  createUserModel:
    type: object
    required:
      - firstName
      - lastName
      - email
      - password
      - countryId
      - roleId
    properties:
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      password:
        type: string
        format: password
      countryId:
        type: integer
        format: int32
        example: 1
      roleId:
        type: integer
        format: int32
        example: 1
  profile:
    type: object
    required:
      - firstName
      - lastName
      - email
      - title
      - city
      - stateId
      - bio
      - socialNetworks
    properties:
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      title:
        type: string
        example: 'Auto Specialist'
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
        example: 1
      bio:
        type: string
        example: 'John Doe''s bio'
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
        example:
          - socialNetworkId: 1
            account: 'daytonasocial'
  createProfileModel:
    type: object
    required:
      - city
      - stateId
      - bio
      - socialNetworks
      - localization
    properties:
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
        example: 1
      bio:
        type: string
        example: 'John Doe''s bio'
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
        example:
          - socialNetworkId: 1
            account: 'daytonasocial'
      localization:
        $ref: '#/definitions/localization'
        example:
          - languageId: 2
          - languageId: 1
          - timeFormatId: 1
          - timeZoneId: 1
  updateProfileModel:
    type: object
    required:
      - firstName
      - lastName
      - email
      - title
      - city
      - stateId
      - bio
      - socialNetworks
    properties:
      firstName:
        type: string
        example: 'John'
      lastName:
        type: string
        example: 'Doe'
      email:
        type: string
        format: email
        example: 'john.doe@daytona.com'
      title:
        type: string
        example: 'Auto Specialist'
      city:
        type: string
        example: 'New York'
      stateId:
        type: integer
        format: int32
      bio:
        type: string
        example: 'John Doe''s bio'
      socialNetworks:
        type: array
        items:
          $ref: '#/definitions/socialNetwork'
  shop:
    type: object
    required:
       - id
       - name
       - establishedYear
       - typeId
       - street
       - city
       - zipCode
       - stateId
       - employeeCount
       - description
       - url
       - imagePath
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        example: 'Vehicle & Car Service'
      establishedYear:
        type: string
        format: date
        example: '11/01/2015'
      typeId:
        type: integer
        format: int32
      street:
        type: string
        example: '5th Avenu, 12'
      city:
        type: string
        example: 'New York'
      zipCode:
        type: string
        example: '111918'
      stateId:
        type: integer
        format: int32
      employeeCount:
        type: integer
        format: int32
        example: 50
      description:
        type: string
        example: 'Vehicle & Car Service''s description'
      url:
        type: string
        format: url
        example: 'https://vehiclecarservice.com'
      imagePath:
        type: string
  shopModel:
    type: object
    required:
       - name
       - establishedYear
       - typeId
       - street
       - city
       - zipCode
       - stateId
       - employeeCount
       - description
       - url
       - imagePath
    properties:
      name:
        type: string
        example: 'Vehicle & Car Service'
      establishedYear:
        type: integer
        format: int32
        example: 2015
      typeId:
        type: integer
        format: int32
      street:
        type: string
        example: '5th Avenu, 12'
      city:
        type: string
        example: 'New York'
      zipCode:
        type: string
        example: '111918'
      stateId:
        type: integer
        format: int32
      employeeCount:
        type: integer
        format: int32
        example: 50
      description:
        type: string
        example: 'Vehicle & Car Service''s description'
      url:
        type: string
        format: url
        example: 'https://vehiclecarservice.com'
      imagePath:
        type: string
  degree:
    type: object
    required:
      - id
      - userId
      - typeId
      - school
      - faculty
      - graduatedOn
      - imagePath
    properties:
      id:
        type: integer
        format: int32
      userId:
        type: integer
        format: int32
      typeId:
        type: integer
        format: int32
      school:
        type: string
        example: 'High School of Vehicle Reparation'
      faculty:
        type: string
        example: 'Department of Car Reparation'
      graduatedOn:
        type: integer
        example: 2015
      imagePath:
        type: string
  degreeModel:
    type: object
    required:
      - typeId
      - school
      - faculty
      - graduatedOn
      - imagePath
    properties:
      typeId:
        type: integer
        format: int32
      school:
        type: string
        example: 'High School of Vehicle Reparation'
      faculty:
        type: string
        example: 'Department of Car Reparation'
      graduatedOn:
        type: integer
        example: 2015
      imagePath:
        type: string
  certificate:
    type: object
    required:
      - id
      - userId
      - name
      - level
      - startedOn
      - imagePath
    properties:
      id:
        type: integer
        format: int32
      userId:
        type: integer
        format: int32
      name:
        type: string
        example: 'Ford Reparation Certificate'
      level:
        type: string
        example: '80'
      startedOn:
        type: string
        format: date
        example: '11/01/2011'
      expriredOn:
        type: string
        format: date
        example: '11/01/2021'
      imagePath:
        type: string
  certificateModel:
    type: object
    required:
      - name
      - level
      - startedOn
      - imagePath
    properties:
      name:
        type: string
        example: 'Ford Reparation Certificate'
      level:
        type: string
        example: '80'
      startedOn:
        type: string
        format: date
        example: '11/01/2011'
      expriredOn:
        type: string
        format: date
        example: '11/01/2021'
      imagePath:
        type: string
  experience:
    type: object
    required:
      - id
      - userId
      - title
      - company
      - startedOn
      - city
      - stateId
    properties:
      id:
        type: integer
        format: int32
      userId:
        type: integer
        format: int32
      title:
        type: string
      company:
        type: string
      startedOn:
        type: string
        format: date
      fininshedOd:
        type: string
        format: date
      city:
        type: string
      stateId:
        type: integer
        format: int32
  experienceModel:
    type: object
    required:
      - title
      - company
      - startedOn
      - city
      - stateId
    properties:
      title:
        type: string
      company:
        type: string
      startedOn:
        type: string
        format: date
      fininshedOd:
        type: string
        format: date
      city:
        type: string
      stateId:
        type: integer
        format: int32
  socialNetwork:
    type: object
    required:
      - socialNetworkId
      - account
    properties:
      socialNetworkId:
        type: integer
        format: int32
        example: 1
      account:
        type: string
        example: 'daytonasocial'
  localization:
    type: object
    required:
      - languageId
      - dateFormatId
      - timeFormatId
      - timeZoneId
    properties:
      languageId:
        type: integer
        format: int32
        example: 1
      dateFormatId:
        type: integer
        format: int32
        example: 1
      timeFormatId:
        type: integer
        format: int32
        example: 1
      timeZoneId:
        type: integer
        format: int32
        example: 1